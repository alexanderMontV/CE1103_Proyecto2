Index: Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.java b/Main.java
new file mode 100644
--- /dev/null	(date 1697659763109)
+++ b/Main.java	(date 1697659763109)
@@ -0,0 +1,89 @@
+// Clase para representar un nodo en el árbol de expresión
+class Nodo {
+    String valor;
+    Nodo izquierda, derecha;
+
+    public Nodo(String valor) {
+        this.valor = valor;
+        this.izquierda = this.derecha = null;
+    }
+}
+
+// Clase para el árbol de expresión
+class ArbolExpresion {
+    Nodo raiz;
+
+    public ArbolExpresion() {
+        raiz = null;
+    }
+
+    // Método para evaluar el árbol de expresión
+    public double evaluar() {
+        return evaluarRecursivo(raiz);
+    }
+
+    private double evaluarRecursivo(Nodo nodo) {
+        if (nodo == null) {
+            return 0;
+        }
+
+        // Si el nodo es un número, devolver su valor como un double
+        if (esNumero(nodo.valor)) {
+            return Double.parseDouble(nodo.valor);
+        }
+
+        // Evaluar las expresiones en los nodos izquierdo y derecho
+        double izquierda = evaluarRecursivo(nodo.izquierda);
+        double derecha = evaluarRecursivo(nodo.derecha);
+
+        // Realizar la operación correspondiente basándose en el operador en el nodo actual
+        switch (nodo.valor) {
+            case "+":
+                return izquierda + derecha;
+            case "-":
+                return izquierda - derecha;
+            case "*":
+                return izquierda * derecha;
+            case "/":
+                if (derecha != 0) {
+                    return izquierda / derecha;
+                } else {
+                    throw new ArithmeticException("División por cero");
+                }
+            case "^":
+                return Math.pow(izquierda, derecha);
+            default:
+                throw new IllegalArgumentException("Operador inválido: " + nodo.valor);
+        }
+    }
+
+    // Método para verificar si una cadena es un número
+    private boolean esNumero(String valor) {
+        try {
+            Double.parseDouble(valor);
+            return true;
+        } catch (NumberFormatException e) {
+            return false;
+        }
+    }
+}
+
+public class Main {
+    public static void main(String[] args) {
+        // Crear un árbol de expresión: 2 + 3 * 4 - 5 / 2
+        ArbolExpresion arbol = new ArbolExpresion();
+        arbol.raiz = new Nodo("-");
+        arbol.raiz.izquierda = new Nodo("+");
+        arbol.raiz.izquierda.izquierda = new Nodo("2");
+        arbol.raiz.izquierda.derecha = new Nodo("*");
+        arbol.raiz.izquierda.derecha.izquierda = new Nodo("3");
+        arbol.raiz.izquierda.derecha.derecha = new Nodo("4");
+        arbol.raiz.derecha = new Nodo("/");
+        arbol.raiz.derecha.izquierda = new Nodo("5");
+        arbol.raiz.derecha.derecha = new Nodo("2");
+
+        // Evaluar la expresión y mostrar el resultado
+        double resultado = arbol.evaluar();
+        System.out.println("Resultado: " + resultado); // Output: Resultado: 9.0
+    }
+}
